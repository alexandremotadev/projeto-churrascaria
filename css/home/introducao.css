.introducao-bg {
  background: var(--cor-12);
  box-shadow: inset 0 -120px var(--cor-0);
}

.introducao {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 0px 40px;
  max-width: 1200px; /* manter conteudo dentro do container ao expandir */
  padding-top: 40px;
  
  /* removi essa parte porque ja consta no .container
  box-sizing: border-box; para somar os paddings definidos abaixo
  padding-left: 20px;
  padding-right: 20px;
  margin auto mantem conteudo alinhado ao header ao expandir
  margin-left: auto;
  margin-right: auto; */
}

/* Inicialmente, o grid coloca cada elemento na ordem do html: h1 (1°l 1°c), p (1°l 2°c), a (2°l 1°c), img (2°l 2°c). Grid column define qual coluna quero posicionar cada elemento 

.introducao p, .introducao a {
  grid-column: 1;
}

.introducao img {  
  grid-row: 1/3; linha 1 de 3
  grid-column: 2; posicionar 2° c
}

Não é mais necessária essa parte devido a div introducao-conteudo
*/

.introducao-conteudo {
  align-self: end; /* alinhar texto final da div */
  padding-bottom: 200px; /* 80px do padding dele + 120px da shadow em introducao-bg */
}

.introducao img {
  width: 100%; /* imagem fica no maximo 100% do tamanho do container */  
  height: 100%;
  object-fit: cover; /* não deixa imagem ser esmagada ao diminuir a tela */
  border-radius: 4px;  
}

.introducao h1 {
  margin-bottom: 32px;
}

.introducao p {
  margin-bottom: 20px;
}

@media (max-width: 800px) {
  .introducao-bg {
    background: var(--cor-11);
    padding-top: 40px;
    box-shadow: inset 0 -60px var(--cor-11);
  }
  .introducao {
    grid-template-columns: 1fr; /* transformar em apenas uma coluna*/
    gap: 32px;
    padding-top: 0px;
  }
  .introducao-conteudo {
    padding-bottom: 0px; /* tirar distancia entre botao e imagem*/
  }
  .introducao h1 {
    margin-bottom: 16px;
  }
  .introducao img {
    display: none;
    /* height: 300px;
    width: 100%; */
  }
}